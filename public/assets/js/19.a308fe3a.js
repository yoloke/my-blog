(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{540:function(t,_,s){"use strict";s.r(_);var v=s(6),e=Object(v.a)({},(function(){var t=this,_=t.$createElement,s=t._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1、ajax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、ajax"}},[t._v("#")]),t._v(" 1、Ajax")]),t._v(" "),s("p",[t._v("英文全称为 "),s("code",[t._v("Asynchronous JavaScript + XML")]),t._v(" ，翻译过来就是"),s("strong",[t._v("异步JavaScript和XML")]),t._v("。")]),t._v(" "),s("p",[t._v("AJAX 不是新的编程语言，而是一种使用现有标准的新方法。它可以创建更好、更快且交互性更强的 web 应用程序。")]),t._v(" "),s("p",[t._v("Ajax 最重要的特性就是可以"),s("strong",[t._v("局部刷新页面")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_2、axios"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、axios"}},[t._v("#")]),t._v(" 2、Axios")]),t._v(" "),s("p",[t._v("Axios是一个基于promise 的 HTTP 库，可以用在浏览器和 node.js中。在服务端它使用原生 Node.js http 模块，而在客户端则使用 XMLHttpRequest。")]),t._v(" "),s("p",[t._v("这里我们只关注客户端的 Axios，它是基于 XHR 进行二次封装形成的工具库。")]),t._v(" "),s("p",[t._v("客户端 Axios 的主要特性有：")]),t._v(" "),s("ul",[s("li",[t._v("从浏览器创建 XMLHttpRequests")]),t._v(" "),s("li",[t._v("支持 Promise API")]),t._v(" "),s("li",[t._v("拦截请求和响应")]),t._v(" "),s("li",[t._v("转换请求和响应数据")]),t._v(" "),s("li",[t._v("取消请求")]),t._v(" "),s("li",[t._v("自动转换JSON数据")]),t._v(" "),s("li",[t._v("客户端支持防御XSRF")])]),t._v(" "),s("p",[t._v("需要注意的是："),s("strong",[t._v("Axios是对XMLHttpRequest的封装，而Fetch是一种新的获取资源的接口方式，并不是对XMLHttpRequest的封装。")])]),t._v(" "),s("p",[t._v("它们"),s("strong",[t._v("最大的不同点在于Fetch是浏览器原生支持，而Axios需要引入Axios库。")])])])}),[],!1,null,null,null);_.default=e.exports}}]);