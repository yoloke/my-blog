(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{543:function(s,t,a){"use strict";a.r(t);var n=a(6),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("strong",[s._v("希尔排序")]),s._v("是"),a("strong",[s._v("插入排序")]),s._v("的一种高效的"),a("strong",[s._v("改进版")]),s._v("，效率比插入排序要"),a("strong",[s._v("高")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("希尔排序的实现思路：")])]),s._v(" "),a("ul",[a("li",[s._v("希尔排序主要通过对数据进行"),a("strong",[s._v("分组")]),s._v("实现快速排序；")]),s._v(" "),a("li",[s._v("根据设定的增量（gap）将数据分为gap个组（"),a("strong",[s._v("组数等于gap")]),s._v("），再在每个分组中进行局部排序；")])]),s._v(" "),a("blockquote",[a("p",[s._v("假如有数组有10个数据，第1个数据为黑色，增量为5。那么第二个为黑色的数据index=5，第3个数据为黑色的数据index = 10（不存在）。所以黑色的数据每组只有2个，10 / 2 = 5一共可分5组，即"),a("strong",[s._v("组数等于增量gap")]),s._v("。")])]),s._v(" "),a("ul",[a("li",[s._v("排序之后，减小增量，继续分组，再次进行局部排序，直到增量gap=1为止。随后只需进行微调就可完成数组的排序；")])]),s._v(" "),a("p",[s._v("具体过程如下：")]),s._v(" "),a("ul",[a("li",[s._v("排序之前的，储存10个数据的原始数组为")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://could-img.oss-cn-hangzhou.aliyuncs.com/202210161955751.png",alt:"image-20200305102330304"}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("设初始增量gap = length / 2 = 5，即数组被分为了5组，如图所示分别为：[8, 3]、[9, 5]、[1, 4]、[7, 6]、[2, 0]")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://could-img.oss-cn-hangzhou.aliyuncs.com/202210161956828.png",alt:"image-20200305104914438"}})])]),s._v(" "),a("li",[a("p",[s._v("随后分别在每组中对数据进行局部排序，5组的顺序如图所示，变为：[3, 8]、[5, 9]、[1, 4]、[6, 7]、[0, 2]：")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://could-img.oss-cn-hangzhou.aliyuncs.com/202210161956578.png",alt:"image-20200305103136251"}})]),s._v(" "),a("ul",[a("li",[s._v("然后缩小增量gap = 5 / 2 = 2，即数组被分为了2组，如图所示分别为：[3，1，0，9，7]、[5，6，8，4，2]：")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://could-img.oss-cn-hangzhou.aliyuncs.com/202210161957581.png",alt:"image-20200305104933858"}})]),s._v(" "),a("ul",[a("li",[s._v("随后分别在每组中对数据进行局部排序，两组的顺序如图所示，变为：[0，1，3，7，9]、[2，4，5，6，8]：")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://could-img.oss-cn-hangzhou.aliyuncs.com/202210161957581.png",alt:"image-20200305103815262"}})]),s._v(" "),a("ul",[a("li",[s._v("然后然后缩小增量gap = 2 / 1 = 1，即数组被分为了1组，如图所示为：[0，2，1，4，3，5，7，6，9，8]：")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://could-img.oss-cn-hangzhou.aliyuncs.com/202210161957447.png",alt:"image-20200305104847458"}})]),s._v(" "),a("ul",[a("li",[s._v("最后只需要对该组数据进行插入排序即可完成整个数组的排序：")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://could-img.oss-cn-hangzhou.aliyuncs.com/202210161957381.png",alt:"image-20200305104707789"}})]),s._v(" "),a("p",[s._v("动态过程：")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://could-img.oss-cn-hangzhou.aliyuncs.com/202210161957556.gif",alt:"img"}}),s._v(" "),a("p",[s._v("图中d表示增量gap。")]),s._v(" "),a("p",[a("strong",[s._v("增量的选择：")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("原稿")]),s._v("中希尔建议的初始间距为"),a("strong",[s._v("N / 2")]),s._v("，比如对于N = 100的数组，增量序列为：50，25，12，6，3，1，可以发现不能整除时向下取整。")]),s._v(" "),a("li",[a("strong",[s._v("Hibbard增量序列：")]),s._v(" 增量序列算法为：2^k - 1，即1，3，5，7... ...等；这种情况的最坏复杂度为 "),a("strong",[s._v("O（N3/2）")]),s._v(",平均复杂度为 "),a("strong",[s._v("O（N5/4）")]),s._v(" 但未被证明；")]),s._v(" "),a("li",[a("strong",[s._v("Sedgewcik增量序列：")])])]),s._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://could-img.oss-cn-hangzhou.aliyuncs.com/202210162043197.png",alt:"image-20200305110724309"}}),s._v(" "),a("p",[s._v("以下代码实现中采用希尔排序原稿中建议的增量即"),a("strong",[s._v("N / 2")]),s._v(" 。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//希尔排序")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" shellSort "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("aq")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1.获取数组的长度")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2.初始化增量")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" gap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3.第一层循环：while循环(使gap不断减小)")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//4.第二层循环：以gap为增量，进行分组，对分组进行插入排序")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//重点为：将index = gap作为选中的第一个数据")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" gap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//i=gap 因为插入排序是从分组的第二个元素开始的")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//5.第三层循环:直接插入排序算法的实现")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" gap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" gap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" gap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n                j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-=")]),s._v(" gap\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//6.将j位置的元素设置为temp")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" temp\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        gap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("这里解释一下上述代码中的三层循环：")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("第一层循环：")]),s._v(" while循环，控制gap递减到1；")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("第二层循环：")]),s._v(" 分别取出根据增量gap分成的gap组数据：")]),s._v(" "),a("ul",[a("li",[s._v("将"),a("code",[s._v("index = gap")]),s._v("的数据作为选中的第一个数据，如下图所示，gap=5，则"),a("code",[s._v("index = gap")]),s._v("的数据为3，"),a("code",[s._v("index = gap - 1")]),s._v("的数据为8，两个数据为一组。")]),s._v(" "),a("li",[s._v("随后gap不断加1右移，直到"),a("code",[s._v("gap < length")]),s._v("，此时实现了将数组分为5组。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://could-img.oss-cn-hangzhou.aliyuncs.com/202210162027782.png",alt:"image-20200305104914438"}})])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("第三层循环：")]),s._v(" 对每一组数据进行插入排序；")])])]),s._v(" "),a("p",[a("strong",[s._v("分析：")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("希尔排序是稳定的排序算法吗：")]),s._v(" "),a("p",[s._v("单次直接插入排序是稳定的，它不会改变相同元素之间的相对顺序，但在多次不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，可能导致相同元素相对顺序发生变化。 因此，希尔排序"),a("code",[s._v("不稳定")]),s._v("。")])]),s._v(" "),a("li",[a("p",[s._v("希尔排序的时间复杂度是多少 ：")]),s._v(" "),a("ul",[a("li",[s._v("最佳情况：T(n) = O(n logn)。")]),s._v(" "),a("li",[s._v("最差情况：T(n) = O(n (log(n))2)。")]),s._v(" "),a("li",[s._v("平均情况：T(n) = 取决于间隙序列。")])])]),s._v(" "),a("li",[a("p",[s._v("希尔排序的效率和增量有直接关系，即使使用原稿中的增量效率都高于简单排序。")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);