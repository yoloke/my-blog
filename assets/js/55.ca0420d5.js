(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{578:function(_,v,o){"use strict";o.r(v);var e=o(6),r=Object(e.a)({},(function(){var _=this,v=_.$createElement,o=_._self._c||v;return o("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[o("ul",[o("li",[_._v("什么是跨域")]),_._v(" "),o("li",[_._v("为什么会跨域")]),_._v(" "),o("li",[_._v("为什么有跨域限制")]),_._v(" "),o("li",[_._v("怎么解决跨域")])]),_._v(" "),o("p",[o("code",[_._v("CORS")]),_._v("[1] "),o("code",[_._v("同源策略")]),_._v("[2]")]),_._v(" "),o("p",[_._v("跨域问题的来源是浏览器为了"),o("strong",[_._v("请求安全")]),_._v("而引入的基于"),o("strong",[_._v("同源策略")]),_._v("的安全特性。当页面和请求的"),o("strong",[_._v("协议")]),_._v("、"),o("strong",[_._v("主机名")]),_._v("或"),o("strong",[_._v("端口")]),_._v("不同时，浏览器判定两者不同源，即为跨域请求。需要注意的是跨域是"),o("strong",[_._v("浏览器的限制")]),_._v("，服务端并不受此影响。当产生跨域时，我们可以通过"),o("code",[_._v("JSONP")]),_._v("、"),o("code",[_._v("CORS")]),_._v("、"),o("code",[_._v("postMessage")]),_._v("等方式解决。")]),_._v(" "),o("h3",{attrs:{id:"_1-跨域问题的来源"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-跨域问题的来源"}},[_._v("#")]),_._v(" 1. 跨域问题的来源")]),_._v(" "),o("p",[_._v("跨域问题的来源是浏览器为了"),o("strong",[_._v("请求安全")]),_._v("而引入的基于**同源策略（Same-origin policy）**的安全特性。同源策略是浏览器一个非常重要的安全策略，基于这个策略可以限制非同源的内容与当前页面进行交互，从而减少页面被攻击的可能性。")]),_._v(" "),o("p",[_._v("当页面和请求的"),o("strong",[_._v("协议")]),_._v("、"),o("strong",[_._v("主机名")]),_._v("或"),o("strong",[_._v("端口")]),_._v("不同时，浏览器判定两者不同源，从而产生跨域。需要注意的是跨域是"),o("strong",[_._v("浏览器的限制")]),_._v("，实际请求已经正常发出和响应了。")]),_._v(" "),o("h3",{attrs:{id:"_2-如何判定跨域"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何判定跨域"}},[_._v("#")]),_._v(" 2. 如何判定跨域")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://could-img.oss-cn-hangzhou.aliyuncs.com/202211222335738.png",alt:"cors"}})]),_._v(" "),o("p",[_._v("如上图所示，一个 origin 由"),o("strong",[_._v("协议（Protocol）")]),_._v("、"),o("strong",[_._v("主机名（Host）"),o("strong",[_._v("和")]),_._v("端口（Port）"),o("strong",[_._v("组成，这三块也是同源策略的判定条件，只有当")]),_._v("协议")]),_._v("、"),o("strong",[_._v("主机名")]),_._v("和"),o("strong",[_._v("端口")]),_._v("都相同时，浏览器才判定两者是同源关系，否则即为跨域。")]),_._v(" "),o("h3",{attrs:{id:"_3-跨域的解决方案"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-跨域的解决方案"}},[_._v("#")]),_._v(" 3. 跨域的解决方案")]),_._v(" "),o("p",[_._v("前端常见的跨域解决方案有 CORS、反向代理（Reverse Proxy）、JSONP 等。")]),_._v(" "),o("h4",{attrs:{id:"_3-1-cors-cross-origin-resource-sharing"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-cors-cross-origin-resource-sharing"}},[_._v("#")]),_._v(" 3.1 CORS (Cross-Origin Resource Sharing)")]),_._v(" "),o("p",[_._v("CORS 是目前最为广泛的解决跨域问题的方案。")]),_._v(" "),o("p",[_._v("方案依赖 服务端/后端 在响应头中添加 "),o("code",[_._v("Access-Control-Allow-*")]),_._v(" 头，告知浏览器端通过此请求。")]),_._v(" "),o("p",[o("strong",[_._v("涉及到的端")])]),_._v(" "),o("p",[_._v("CORS 只需要服务端/后端支持即可，不涉及前端改动。")]),_._v(" "),o("p",[o("strong",[_._v("具体实现方式")])]),_._v(" "),o("p",[_._v("CORS 将请求分为"),o("strong",[_._v("简单请求（Simple Requests）"),o("strong",[_._v("和")]),_._v("需预检请求（Preflighted requests）")]),_._v("，不同场景有不同的行为：")]),_._v(" "),o("p",[o("strong",[_._v("简单请求")])]),_._v(" "),o("p",[_._v("不会触发预检请求的称为简单请求。当请求满足以下条件时就是一个简单请求：")]),_._v(" "),o("ul",[o("li",[_._v("请求方法："),o("code",[_._v("GET")]),_._v("、"),o("code",[_._v("HEAD")]),_._v("、"),o("code",[_._v("POST")]),_._v("。")]),_._v(" "),o("li",[_._v("请求头："),o("code",[_._v("Accept")]),_._v("、"),o("code",[_._v("Accept-Language")]),_._v("、"),o("code",[_._v("Content-Language")]),_._v("、"),o("code",[_._v("Content-Type")]),_._v("。\n"),o("ul",[o("li",[_._v("Content-Type 仅支持："),o("code",[_._v("application/x-www-form-urlencoded")]),_._v("、"),o("code",[_._v("multipart/form-data")]),_._v("、"),o("code",[_._v("text/plain")]),_._v("。")])])])]),_._v(" "),o("p",[o("strong",[_._v("需预检请求")])]),_._v(" "),o("p",[_._v("当一个请求不满足以上简单请求的条件时，浏览器会自动向服务端发送一个 "),o("strong",[_._v("OPTIONS")]),_._v(" 请求，通过服务端返回的 "),o("code",[_._v("Access-Control-Allow-*")]),_._v(" 判定请求是否被允许。")]),_._v(" "),o("p",[_._v("CORS 引入了以下几个以 "),o("code",[_._v("Access-Control-Allow-*")]),_._v(" 开头：")]),_._v(" "),o("ul",[o("li",[o("code",[_._v("Access-Control-Allow-Origin")]),_._v(" 表示允许的来源")]),_._v(" "),o("li",[o("code",[_._v("Access-Control-Allow-Methods")]),_._v(" 表示允许的请求方法")]),_._v(" "),o("li",[o("code",[_._v("Access-Control-Allow-Headers")]),_._v(" 表示允许的请求头")]),_._v(" "),o("li",[o("code",[_._v("Access-Control-Allow-Credentials")]),_._v(" 表示允许携带认证信息")])]),_._v(" "),o("p",[_._v("当请求符合响应头的这些条件时，浏览器才会发送并响应正式的请求。")]),_._v(" "),o("h4",{attrs:{id:"_3-2-反向代理"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-反向代理"}},[_._v("#")]),_._v(" 3.2 反向代理")]),_._v(" "),o("p",[_._v("反向代理解决跨域问题的方案依赖同源的服务端对请求做一个转发处理，将请求从跨域请求转换成同源请求。")]),_._v(" "),o("p",[o("strong",[_._v("涉及到的端")])]),_._v(" "),o("p",[_._v("反向代理只需要 服务端/后端 支持，几乎不涉及前端改动，只用切换接口即可。")]),_._v(" "),o("p",[o("strong",[_._v("具体实现方式")])]),_._v(" "),o("p",[_._v("反向代理的实现方式为在页面同域下配置一套反向代理服务，页面请求同域的服务端，服务端请求上游的实际的服务端，之后将结果返回给前端。")]),_._v(" "),o("h4",{attrs:{id:"_3-3-jsonp"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-jsonp"}},[_._v("#")]),_._v(" 3.3 JSONP")]),_._v(" "),o("p",[_._v("JSONP 是一个相对古老的跨域解决方案，只支持 GET 请求。主要是利用了浏览器加载 "),o("code",[_._v("JavaScript")]),_._v(" 资源文件时不受同源策略的限制而实现跨域获取数据。")]),_._v(" "),o("p",[o("strong",[_._v("涉及到的端")])]),_._v(" "),o("p",[_._v("JSONP 需要服务端和前端配合实现。")]),_._v(" "),o("p",[o("strong",[_._v("具体实现方式")])]),_._v(" "),o("p",[_._v("JSONP 的原理是利用了浏览器加载 JavaScript 资源文件时不受同源策略的限制而实现的。具体流程如下：")]),_._v(" "),o("ol",[o("li",[_._v("全局注册一个函数，例如："),o("code",[_._v("window.getHZFEMember = (num) => console.log('HZFE Member: ' + num);")]),_._v("。")]),_._v(" "),o("li",[_._v("构造一个请求 URL，例如："),o("code",[_._v("https://hzfe.org/api/hzfeMember?callback=getHZFEMember")]),_._v("。")]),_._v(" "),o("li",[_._v("生成一个 "),o("code",[_._v("<script>")]),_._v(" 并把 "),o("code",[_._v("src")]),_._v(" 设为上一步的请求 URL 并插入到文档中，如 "),o("code",[_._v('<script src="https://hzfe.org/api/hzfeMember?callback=getHZFEMember" />')]),_._v("。")]),_._v(" "),o("li",[_._v("服务端构造一个 JavaScript 函数调用表达式并返回，例如："),o("code",[_._v("getHZFEMember(17)")]),_._v("。")]),_._v(" "),o("li",[_._v("浏览器加载并执行以上代码，输出 "),o("code",[_._v("HZFE Member: 17")]),_._v("。")])]),_._v(" "),o("h4",{attrs:{id:"非常用方式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#非常用方式"}},[_._v("#")]),_._v(" 非常用方式")]),_._v(" "),o("ul",[o("li",[_._v("postMessage\n"),o("ul",[o("li",[_._v("即在两个 origin 下分别部署一套页面 A 与 B，A 页面通过 "),o("code",[_._v("iframe")]),_._v(" 加载 B 页面并监听消息，B 页面发送消息。")])])]),_._v(" "),o("li",[_._v("window.name\n"),o("ul",[o("li",[_._v("主要是利用 "),o("code",[_._v("window.name")]),_._v(" 页面跳转不改变的特性实现跨域，即 "),o("code",[_._v("iframe")]),_._v(" 加载一个跨域页面，设置 "),o("code",[_._v("window.name")]),_._v("，跳转到同域页面，可以通过 "),o("code",[_._v("$('iframe').contentWindow.name")]),_._v(" 拿到跨域页面的数据。")])])]),_._v(" "),o("li",[_._v("document.domain\n"),o("ul",[o("li",[_._v("可将相同一级域名下的子域名页面的 "),o("code",[_._v("document.domain")]),_._v(" 设置为一级域名实现跨域。")]),_._v(" "),o("li",[_._v("可将同域不同端口的 "),o("code",[_._v("document.domain")]),_._v(" 设置为同域名实现跨域（端口被置为 null）。")])])])]),_._v(" "),o("h2",{attrs:{id:"扩展阅读"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#扩展阅读"}},[_._v("#")]),_._v(" 扩展阅读")]),_._v(" "),o("h3",{attrs:{id:"_1-localstorage-sessionstorage-跨域"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-localstorage-sessionstorage-跨域"}},[_._v("#")]),_._v(" 1. LocalStorage / SessionStorage 跨域")]),_._v(" "),o("p",[_._v("LocalStorage 和 SessionStorage 同样受到同源策略的限制。而跨域读写的方式也可以使用前文提到的 postMessage。")]),_._v(" "),o("h3",{attrs:{id:"_2-跨域与监控"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-跨域与监控"}},[_._v("#")]),_._v(" 2. 跨域与监控")]),_._v(" "),o("p",[_._v("前端项目在统计前端报错监控时会遇到上报的内容只有 "),o("code",[_._v("Script Error")]),_._v(" 的问题。这个问题也是由同源策略引起。在 "),o("code",[_._v("<script>")]),_._v(" 标签上添加 "),o("code",[_._v('crossorigin="anonymous"')]),_._v(" 并且返回的 JS 文件响应头加上 "),o("code",[_._v("Access-Control-Allow-Origin: *")]),_._v(" 即可捕捉到完整的错误堆栈。")]),_._v(" "),o("h3",{attrs:{id:"_3-跨域与图片"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-跨域与图片"}},[_._v("#")]),_._v(" 3. 跨域与图片")]),_._v(" "),o("p",[_._v("前端项目在图片处理时可能会遇到图片绘制到 Canvas 上之后却不能读取像素或导出 base64 的问题。这个问题也是由同源策略引起。解决方式和上文相同，给图片添加 "),o("code",[_._v('crossorigin="anonymous"')]),_._v(" 并在返回的图片文件响应头加上 "),o("code",[_._v("Access-Control-Allow-Origin: *")]),_._v(" 即可解决。")]),_._v(" "),o("h2",{attrs:{id:"参考资料"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),o("ol",[o("li",[o("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"}},[_._v("Cross-Origin Resource Sharing (CORS)"),o("OutboundLink")],1)]),_._v(" "),o("li",[o("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"}},[_._v("Same-origin policy"),o("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);