(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{583:function(t,e,_){"use strict";_.r(e);var i=_(6),v=Object(i.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"一、设计模式简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、设计模式简介"}},[t._v("#")]),t._v(" 一、设计模式简介")]),t._v(" "),_("p",[t._v("设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")]),t._v(" "),_("p",[t._v("设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。")]),t._v(" "),_("p",[t._v("设计模式能使不稳定依赖于相对稳定、具体依赖于相对抽象，避免会引起麻烦的紧耦合，以增强软件设计面对并适应变化的能力。")]),t._v(" "),_("p",[t._v("因此，当我们遇到合适的场景时，我们可能会条件反射一样自然而然想到符合这种场景的设计模式：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("比如，当系统中某个接口的结构已经无法满足我们现在的业务需求，但又不能改动这个接口，因为可能原来的系统很多功能都依赖于这个接口，改动接口会牵扯到太多文件；")])]),t._v(" "),_("li",[_("p",[t._v("因此应对这种场景，我们可以很快地想到可以用适配器模式来解决这个问题。")])])]),t._v(" "),_("h2",{attrs:{id:"二、设计原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、设计原则"}},[t._v("#")]),t._v(" 二、设计原则")]),t._v(" "),_("p",[_("strong",[t._v("设计模式五大原则")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("开放/封闭原则 "),_("code",[t._v("O – OpenClosed Principle")])]),t._v(" "),_("ul",[_("li",[t._v("对扩展开放，对修改封闭")]),t._v(" "),_("li",[t._v("增加需求时，扩展新代码，而非修改已有代码")])])]),t._v(" "),_("li",[_("p",[t._v("里氏替换原则 "),_("code",[t._v("L – Liskov Substitution Principle")])]),t._v(" "),_("ul",[_("li",[t._v("继承必须确保超类所拥有的性质再子类中依旧成立")]),t._v(" "),_("li",[t._v("子类可以扩展父类的功能，但不要修改父类原有的功能")]),t._v(" "),_("li",[t._v("尽量不要重写方法")])])]),t._v(" "),_("li",[_("p",[t._v("依赖倒置原则 "),_("code",[t._v("D – Dependency Inversion Principle")])]),t._v(" "),_("ul",[_("li",[t._v("面向接口编程，不面向实现编程。")]),t._v(" "),_("li",[t._v("抽象不依赖细节，细节依赖抽象。")])])]),t._v(" "),_("li",[_("p",[t._v("单一职责原则 "),_("code",[t._v("S – Single Responsibility Principle")])]),t._v(" "),_("ul",[_("li",[t._v("一个程序只做好一件事 。")]),t._v(" "),_("li",[t._v("如果功能过于复杂就拆分开，每个部分保持独立")]),t._v(" "),_("li",[t._v("控制类的粒度大小，将对象解耦，提高其内聚性")])])]),t._v(" "),_("li",[_("p",[t._v("接口隔离原则 "),_("code",[t._v("I – Interface Segregation Principle")])]),t._v(" "),_("ul",[_("li",[t._v("使用多个专门的接口，而不使用单一的总接口。")]),t._v(" "),_("li",[t._v("为各个类建立它们需要的专用接口。")]),t._v(" "),_("li",[t._v("类似单一职责原则，这里更关注接口。")])])])]),t._v(" "),_("h2",{attrs:{id:"三、设计模式分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、设计模式分类"}},[t._v("#")]),t._v(" 三、设计模式分类")]),t._v(" "),_("p",[t._v("23种设计模式：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[_("span",{staticStyle:{display:"inline-block",width:"180px"}},[t._v("创建型")])]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[_("span",{staticStyle:{display:"inline-block",width:"200px"}},[t._v("结构型 ")])]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[_("span",{staticStyle:{display:"inline-block",width:"200px"}},[t._v("行为型 ")])])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("单例模式")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("适配器模式")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("观察者模式")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("原型模式")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("装饰器模式")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("迭代器模式")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("工厂模式")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("代理模式")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("策略模式")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("抽象工厂模式")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("外观模式")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("模板方法模式")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("建造者模式")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("桥接模式")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("职责链模式")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}}),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("组合模式")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("命令模式")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}}),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("享元模式")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("备忘录模式")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}}),t._v(" "),_("td",{staticStyle:{"text-align":"center"}}),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("状态模式")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}}),t._v(" "),_("td",{staticStyle:{"text-align":"center"}}),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("访问者模式")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}}),t._v(" "),_("td",{staticStyle:{"text-align":"center"}}),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("中介者模式")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}}),t._v(" "),_("td",{staticStyle:{"text-align":"center"}}),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("解释器模式")])])])]),t._v(" "),_("h3",{attrs:{id:"_3-1-创建型模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-创建型模式"}},[t._v("#")]),t._v(" 3.1 创建型模式")]),t._v(" "),_("p",[t._v("创建型模式的作用就是创建对象，说到创建一个对象，最熟悉的就是 new 一个对象，然后 set 相关属性。但是，在很多场景下，我们需要给客户端提供更加友好的创建对象的方式，尤其是那种我们定义了类，但是需要提供给其他开发者用的时候。")]),t._v(" "),_("h3",{attrs:{id:"_3-2-结构型模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-结构型模式"}},[t._v("#")]),t._v(" 3.2 结构型模式")]),t._v(" "),_("p",[t._v("创建型模式介绍创建对象的一些设计模式，构型模式旨在通过改变代码结构来达到解耦的目的，使得我们的代码容易维护和扩展。")]),t._v(" "),_("h3",{attrs:{id:"_3-3-行为型模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-行为型模式"}},[t._v("#")]),t._v(" 3.3 行为型模式")]),t._v(" "),_("p",[t._v("行为型模式关注的是各个类之间的相互作用，将职责划分清楚，使得我们的代码更加地清晰。")])])}),[],!1,null,null,null);e.default=v.exports}}]);